#!/usr/bin/env python3
"""
TEI XML processor CLI for extracting sections and figures from GROBID output.

This script provides command-line functionality to:
1. Extract document sections with hierarchical numbering
2. Extract figures and tables with PDF coordinates
3. Save sections as markdown
4. Crop figures/tables from PDF using coordinates
"""

import argparse
import sys
from pathlib import Path

# Add parent directory to Python path for package imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from interactive_paper_reading.tei import TEIProcessor


def main():
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(
        description="Extract sections and figures from TEI XML files generated by GROBID",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Extract sections and save as markdown
  python tei_processor.py paper.tei.xml --sections --output sections.md
  
  # Extract figures and crop from PDF
  python tei_processor.py paper.tei.xml --figures --pdf paper.pdf --output-dir ./output
  
  # Extract everything
  python tei_processor.py paper.tei.xml --all --pdf paper.pdf --output-dir ./output
        """
    )
    
    parser.add_argument("tei_file", help="Path to TEI XML file")
    parser.add_argument("--sections", action="store_true", help="Extract sections")
    parser.add_argument("--figures", action="store_true", help="Extract figures and tables")
    parser.add_argument("--graphics", action="store_true", help="Extract graphics")
    parser.add_argument("--all", action="store_true", help="Extract everything")
    parser.add_argument("--pdf", help="Path to source PDF file (for cropping)")
    parser.add_argument("--output", help="Output file for sections markdown")
    parser.add_argument("--output-dir", help="Output directory for figures/graphics")
    
    args = parser.parse_args()
    
    # Validate input
    tei_file = Path(args.tei_file)
    if not tei_file.exists():
        print(f"‚ùå TEI file not found: {tei_file}")
        return 1
    
    # Set defaults
    if args.all:
        args.sections = True
        args.figures = True
        args.graphics = True
    
    if not any([args.sections, args.figures, args.graphics]):
        print("‚ùå Please specify what to extract: --sections, --figures, --graphics, or --all")
        return 1
    
    # Initialize processor
    processor = TEIProcessor()
    
    try:
        # Extract sections
        if args.sections:
            print("üìù Extracting sections...")
            sections = processor.extract_sections(tei_file)
            print(f"Found {len(sections)} sections")
            
            if args.output:
                output_file = Path(args.output)
            else:
                output_file = tei_file.parent / f"{tei_file.stem}_sections.md"
            
            processor.save_sections_as_markdown(sections, output_file)
            print(f"‚úÖ Sections saved to: {output_file}")
        
        # Extract figures and tables
        if args.figures:
            print("\nüñºÔ∏è  Extracting figures and tables...")
            figures_tables = processor.extract_figures_tables(tei_file)
            print(f"Found {len(figures_tables)} figures/tables")
            
            if figures_tables and args.pdf:
                pdf_file = Path(args.pdf)
                if not pdf_file.exists():
                    print(f"‚ùå PDF file not found: {pdf_file}")
                    return 1
                
                if args.output_dir:
                    output_dir = Path(args.output_dir) / "figures"
                else:
                    output_dir = tei_file.parent / "figures"
                
                output_dir.mkdir(exist_ok=True, parents=True)
                
                print("‚úÇÔ∏è  Cropping figures from PDF...")
                for i, fig_table in enumerate(figures_tables):
                    safe_caption = "".join(c for c in fig_table.caption[:30] 
                                         if c.isalnum() or c in (' ', '-')).strip()
                    safe_caption = safe_caption.replace(' ', '_')
                    if not safe_caption:
                        safe_caption = f"{fig_table.element_type}_{i+1}"
                    
                    output_file = output_dir / f"{fig_table.element_type}_{i+1}_{safe_caption}.png"
                    
                    try:
                        processor.crop_figure_from_pdf(fig_table, pdf_file, output_file)
                        print(f"  ‚úÖ {output_file.name}")
                    except Exception as e:
                        print(f"  ‚ùå Failed to crop {fig_table.element_type} {i+1}: {e}")
        
        # Extract graphics
        if args.graphics:
            print("\nüé® Extracting graphics...")
            graphics = processor.extract_graphics(tei_file)
            print(f"Found {len(graphics)} graphics")
            
            if graphics and args.pdf:
                pdf_file = Path(args.pdf)
                if not pdf_file.exists():
                    print(f"‚ùå PDF file not found: {pdf_file}")
                    return 1
                
                if args.output_dir:
                    output_dir = Path(args.output_dir) / "graphics"
                else:
                    output_dir = tei_file.parent / "graphics"
                
                output_dir.mkdir(exist_ok=True, parents=True)
                
                print("‚úÇÔ∏è  Cropping graphics from PDF...")
                for i, graphic in enumerate(graphics):
                    safe_caption = "".join(c for c in graphic.parent_figure_caption[:30] 
                                         if c.isalnum() or c in (' ', '-')).strip()
                    safe_caption = safe_caption.replace(' ', '_')
                    if not safe_caption:
                        safe_caption = f"graphic_{i+1}"
                    
                    output_file = output_dir / f"graphic_{i+1}_{safe_caption}.png"
                    
                    try:
                        processor.crop_graphic_from_pdf(graphic, pdf_file, output_file)
                        print(f"  ‚úÖ {output_file.name}")
                    except Exception as e:
                        print(f"  ‚ùå Failed to crop graphic {i+1}: {e}")
        
        print("\nüéâ Processing complete!")
        return 0
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
